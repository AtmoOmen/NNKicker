name: Update Main Repo

on:
  release:
    types: [published]

jobs:
  update-main-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install @actions/github

      - name: Get the latest release info
        id: get-release
        run: |
          LATEST_RELEASE_INFO=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
          LATEST_RELEASE_URL=$(echo $LATEST_RELEASE_INFO | jq -r '.assets[0].browser_download_url')
          LATEST_RELEASE_TAG=$(echo $LATEST_RELEASE_INFO | jq -r '.tag_name')
          echo "::set-output name=url::$LATEST_RELEASE_URL"
          echo "::set-output name=tag::$LATEST_RELEASE_TAG"

      - name: Update main repository
        run: |
          const github = require('@actions/github').getOctokit(process.env.PERSONAL_ACCESS_TOKEN);

          const pluginName = 'NNKicker';
          const version = '${{ steps.get-release.outputs.tag }}';
          const owner = 'AtmoOmen';
          const repo = 'DalamudPlugins';
          const path = 'pluginmaster.json';
          const branch = 'main';
          const message = `Update ${pluginName} to ${version}`;
          const downloadUrl = '${{ steps.get-release.outputs.url }}';

          github.repos.getContent({
            owner,
            repo,
            path,
            ref: branch,
          }).then(file => {
            const content = Buffer.from(file.data.content, 'base64').toString();
            const json = JSON.parse(content);

            const item = json.plugins.find(p => p.Name === pluginName);
            if (item) {
              item.DownloadLinkInstall = downloadUrl;
              item.DownloadLinkTesting = downloadUrl;
              item.DownloadLinkUpdate = downloadUrl;
              item.Version = version;
            }

            github.repos.createOrUpdateFileContents({
              owner,
              repo,
              path,
              message,
              content: Buffer.from(JSON.stringify(json, null, 2)).toString('base64'),
              sha: file.data.sha,
              branch,
            });
          });
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
